---
-   stat:
        path: "{{ brew_install_path }}/bin/brew"
    register: brew_state
    tags:
        - always

-   name: Ensure homebrew install path ownership.
    file:
        path: "{{ brew_install_path }}"
        owner: '{{ brew_user }}'
    ignore_errors: yes
    become: yes
    tags:
        - always

-   name: Create a brew directories
    file:
        path: '{{ item }}'
        state: directory
        owner: '{{ brew_user }}'
        group: '{{ brew_group }}'
        mode: '0775'
    with_items: '{{ brew_directories }}'
    become: yes
    tags:
        - always

-   name: Downloading linuxbrew
    get_url:
        url: "https://github.com/Homebrew/brew/tarball/master"
        dest: "/tmp/brew-master.tgz"
    tags:
        - always

-   name: "Removing previously installed linuxbrew"
    file:
      state: absent
      path: "{{ brew_install_path }}/Homebrew"

-   name: Extracting Homebrew.
    shell: "tar -xzf /tmp/brew-master.tgz --strip 1"
    args:
        chdir: "{{ brew_install_path }}/Homebrew"
        warn: false
    tags:
        - always

-   name: Ensure proper ownership on brew_install_path subdirs.
    shell: >
        ls -A "{{ brew_install_path }}" | xargs -I {} chown -R "{{ brew_user }}" "{{ brew_install_path }}/{}"
        ls -A "{{ brew_install_path }}" | xargs -I {} chgrp -R "{{ brew_group }}" "{{ brew_install_path }}/{}"
        ls -A "{{ brew_install_path }}" | xargs -I {} chmod g+w "{{ brew_install_path }}/{}"
    become: yes
    tags:
        - always

-   name: Create a symbolic link
    file:
        src: '{{ brew_install_path }}/Homebrew/bin/brew'
        dest: '{{ brew_install_path }}/bin/brew'
        state: link
    tags:
        - always

-   stat:
        path: "{{ brew_user_home_dir }}/.bash_profile"
    register: bash_profile_state
    tags:
        - always
-   stat:
        path: "{{ brew_user_home_dir }}/.profile"
    register: profile_state
    tags:
        - always

-   name: "Update {{ brew_user_home_dir }}/.bash_profile"
    lineinfile:
        path: '{{ brew_user_home_dir }}/.bash_profile'
        line: 'eval $({{ brew_install_path }}/bin/brew shellenv)'
    when: bash_profile_state.stat.exists
    tags:
        - always

-   name: "Update {{ brew_user_home_dir }}/.profile"
    lineinfile:
        path: '{{ brew_user_home_dir }}/.profile'
        line: 'eval $({{ brew_install_path }}/bin/brew shellenv)'
    when: profile_state.stat.exists
    tags:
        - always

-   name: Stash brew changes
    shell: 'cd {{ brew_install_path }}/Homebrew/Library && git stash && git clean -d -f'
    ignore_errors: yes
    when: brew_state.stat.exists
    tags:
        - always

-   name: Brew update
    shell: 'brew update > /dev/null 2>&1'
    ignore_errors: yes
    retries: 2
    delay: 1
    tags:
        - always

# Tap.
-   name: Ensure configured taps are tapped.
    shell: brew tap {{ item }}
    with_items: "{{ brew_taps }}"
    tags:
        - always

# Brew.

-   name: Ensure configured linuxbrew packages are installed
    homebrew:
        name: "{{ brew_installed_packages }}"
        state: latest
    tags:
        - always

-   name: Upgrade all linuxbrew packages (if configured).
    homebrew:
        update_homebrew: yes
        upgrade_all: yes
    when: brew_upgrade_all_packages
    tags:
        - always

# Cask.
#- name: Get list of apps installed with cask.
#  command: >
#    bash -l -c '{{ brew_brew_bin_path }}/brew cask list'
#  register: brew_cask_list
#  check_mode: no
#  changed_when: false
#  tags:
#    - always

## Use command module instead of brew_cask so appdir can be used.
#- name: Install configured cask applications.
#  command: >
#    bash -l -c '{{ brew_brew_bin_path }}/brew cask reinstall {{ item }} --appdir={{ brew_cask_appdir }}'
#  with_items: "{{ brew_cask_apps }}"
##  when: "item not in brew_cask_list.stdout"
#  tags:
#    - always
#
#- name: Check for Brewfile.
#  stat:
#    path: "{{ brew_brewfile_dir }}/Brewfile"
#  register: brew_brewfile
#  tags:
#    - always
#
#- name: Install from Brewfile.
#  command: "brew bundle chdir={{ brew_brewfile_dir }}"
#  when: brew_brewfile.stat.exists and brew_use_brewfile
#  tags:
#    - always
