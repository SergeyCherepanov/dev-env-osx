---
- name: Get current account's username.
  shell: whoami
  register: homebrew_whoami
  changed_when: false
  check_mode: no
  tags:
    - always

- name: "Creates ~/Library/LaunchAgents"
  file: 
    path: "{{ ansible_env.HOME }}/Library/LaunchAgents"
    state: directory
  tags:
    - always

#- name: Setup homebrew install path.
#  file:
#    path: "{{ homebrew_install_path }}/*"
#    owner: "{{ ansible_env.USER }}"
#    recurse: yes
#  become: yes
#  become_method: sudo
#  tags:
#    - always

- name: Downloading Homebrew.
  #shell: "curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C {{ homebrew_install_path }}"
  get_url: 
    url: "https://github.com/Homebrew/brew/tarball/master"
    dest: "/tmp/brew-master.tgz"
  tags:
    - always

- name: Extracting Homebrew.
  shell: "tar xzf /tmp/brew-master.tgz --strip 1 -C {{ homebrew_install_path }}"
  become: yes
  args:
    warn: false
  tags:
    - always

- name: Ensure proper permissions on homebrew_brew_bin_path dirs.
  file:
    path: "{{ homebrew_brew_bin_path }}"
    mode: 0775
    state: directory
    recurse: true
  become: yes
  tags:
    - always

- name: Ensure proper ownership on homebrew_install_path subdirs.
  shell: >
    ls -A "{{ homebrew_install_path }}" | xargs -I {} chown -R "{{ homebrew_whoami.stdout }}:admin" "{}"
  become: yes
  tags:
    - always

- name: Check if homebrew binary is already in place.
  stat: 
    path: "{{ homebrew_brew_bin_path }}/brew"
  register: homebrew_binary
  tags:
    - always

- name: Symlink brew to homebrew_brew_bin_path.
  file:
    src: "{{ homebrew_install_path }}/bin/brew"
    dest: "{{ homebrew_brew_bin_path }}/brew"
    state: link
  when: homebrew_binary.stat.exists == false
  become: yes
  tags:
    - always

# Tap.
- name: Ensure configured taps are tapped.
  homebrew_tap: 
    tap: "{{ item }}"
    state: present
  with_items: "{{ homebrew_taps }}"
  tags:
    - always

# Brew.
- name: Ensure configured homebrew packages are installed.
  homebrew: 
    name: "{{ item }}"
    state: present
  with_items: "{{ homebrew_installed_packages }}"
  tags:
    - always

- name: Upgrade all homebrew packages (if configured).
  homebrew:
    update_homebrew: yes
    upgrade_all: yes
  when: homebrew_upgrade_all_packages
  tags:
    - always

# Cask.
- name: Get list of apps installed with cask.
  command: >
    bash -l -c '{{ homebrew_brew_bin_path }}/brew cask list'
  register: homebrew_cask_list
  check_mode: no
  changed_when: false
  tags:
    - always

# Use command module instead of homebrew_cask so appdir can be used.
- name: Install configured cask applications.
  command: >
    bash -l -c '{{ homebrew_brew_bin_path }}/brew cask install {{ item }} --appdir={{ homebrew_cask_appdir }}'
  with_items: "{{ homebrew_cask_apps }}"
  when: "item not in homebrew_cask_list.stdout"
  tags:
    - always

- name: Check for Brewfile.
  stat:
    path: "{{ homebrew_brewfile_dir }}/Brewfile"
  register: homebrew_brewfile
  tags:
    - always

- name: Install from Brewfile.
  command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
  when: homebrew_brewfile.stat.exists and homebrew_use_brewfile
  tags:
    - always

- name: "Adding homebrew to PATH in {{ ansible_env.HOME }}/.zshrc"
  blockinfile:
    create: yes
    dest: '{{ ansible_env.HOME }}/.zshrc'
    marker: "# {mark} homebrew PATH"
    block: |
      export PATH="/usr/local/sbin:$PATH"
  tags:
    - always

- name: "Adding homebrew to PATH in {{ ansible_env.HOME }}/.bashrc"
  blockinfile:
    create: yes
    dest: '{{ ansible_env.HOME }}/.bashrc'
    marker: "# {mark} homebrew PATH"
    block: |
      export PATH="/usr/local/sbin:$PATH"
  tags:
    - always
