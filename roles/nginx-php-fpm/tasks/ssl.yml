---
- name: "Install crtgen tool"
  template: 
    src: crtgen.j2
    dest: "{{ brew_install_path }}/bin/crtgen"
    mode: u+rx
  tags:
    - always  

- name: "Install hostnames tool"
  template: 
    src: "hostnames.j2"
    dest: "{{ brew_install_path }}/bin/hostnames"
    mode: u+rx
    trim_blocks: false
  tags:
    - always  

- name: "Creates localCA directories"
  file:
    path: "{{item}}"
    state: directory
    mode: 0755
  with_items:
    - "{{ brew_install_path }}/etc/openssl/localCA/certs"
    - "{{ brew_install_path }}/etc/openssl/localCA/newcerts"
    - "{{ brew_install_path }}/etc/openssl/localCA/crl"
    - "{{ brew_install_path }}/etc/openssl/localCA/private"
  tags:
    - always

- stat:
    path: "{{ brew_install_path }}/etc/openssl/localCA/caconfig.cnf"
  register: state
  tags:
    - always  

- name: "Creates ca config"
  template: 
    src: ssl/caconfig.cnf.j2
    dest: "{{ brew_install_path }}/etc/openssl/localCA/caconfig.cnf"
  when: not state.stat.exists
  tags:
    - always  

- name: "Creates config for domains"
  template: 
    src: ssl/domain.cnf.j2
    dest: "{{ brew_install_path }}/etc/openssl/localCA/{{item}}_{{root_domain}}.cnf"
  with_items: "{{subdomains}}"
  tags:
    - always  
#
#- name: "Creates config for domains with versions"
#  template: 
#    src: ssl/domain_version.cnf.j2
#    dest: "{{ brew_install_path }}/etc/openssl/localCA/{{item.1}}_{{item.0}}_{{root_domain}}.cnf"
#  with_nested:
#    - "{{subdomains}}"
#    - "{{php_versions}}"
#  tags:
#    - always

- stat:
    path: "{{ brew_install_path }}/etc/openssl/localCA/index.txt"
  register: state
  tags:
    - always  

- name: "Create the Certificate Database"
  shell: "echo '01' > {{ brew_install_path }}/etc/openssl/localCA/serial && touch {{ brew_install_path }}/etc/openssl/localCA/index.txt"
  when: not state.stat.exists
  tags:
    - always

- name: "Cheking if certificate already generated"
  stat:
    path: "{{ brew_install_path }}/etc/openssl/localCA/cacert.pem"
  register: state
  tags:
    - always  

- name: "Generate the Certificate Authority (CA) certificate"
  shell: 'openssl req -x509 -newkey rsa:2048 -out {{ brew_install_path }}/etc/openssl/localCA/cacert.pem -outform PEM -days 1825 -nodes'
  when: not state.stat.exists
  environment:
    OPENSSL_CONF: "{{ brew_install_path }}/etc/openssl/localCA/caconfig.cnf"
  tags:
    - always

- name: "Adding CA certificate to keychain"
  shell: 'security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain {{ brew_install_path }}/etc/openssl/localCA/cacert.pem'
  become: true
  when: ansible_system == "Darwin"
  tags:
    - always

- name: "Ensure /usr/share/ca-certificates/extra"
  file:
    path: "/usr/share/ca-certificates/extra"
    state: directory
    mode: 0755
  become: yes
  when: ansible_system == "Linux"
  tags:
  - always

- name: "Copy root certificate /usr/share/ca-certificates/extra"
  copy:
    src: '{{ brew_install_path }}/etc/openssl/localCA/cacert.pem'
    dest: '/usr/local/share/ca-certificates/cacert.crt'
  become: yes
  when: ansible_system == "Linux"
  tags:
  - always

- name: "update-ca-certificates"
  shell: 'update-ca-certificates'
  become: yes
  when: ansible_system == "Linux"
  tags:
  - always
    
- name: "Generate keys and signing for domains"
  shell: '{{ brew_install_path }}/bin/crtgen {{item}}.{{root_domain}}'
  with_items: "{{subdomains}}"
  tags:
    - always

- name: Ensure symlink for /usr/lib/ssl/certs
  file:
    src: "{{ brew_install_path }}/etc/openssl/certs"
    dest: "/usr/lib/ssl/certs"
    state: link
    force: yes
  when: ansible_system == "Linux"
  become: true
  tags:
  - always

- name: "Ensure symlink: {{ brew_install_path }}/etc/openssl/certs"
  file:
    src: "{{ brew_install_path }}/etc/openssl/certs"
    dest: "/usr/lib/ssl/certs"
    state: link
    force: yes
  when: ansible_system == "Linux"
  become: true
  tags:
  - always

- name: "Ensure symlink: {{ brew_install_path }}/etc/openssl/openssl.cnf"
  file:
    src: "{{ brew_install_path }}/etc/openssl/openssl.cnf"
    dest: "/usr/lib/ssl/openssl.cnf"
    state: link
    force: yes
  when: ansible_system == "Linux"
  become: true
  tags:
  - always

- name: "Ensure symlink: {{ brew_install_path }}/etc/openssl/certs"
  file:
    src: "{{ brew_install_path }}/etc/openssl/certs"
    dest: "/usr/lib/ssl/certs"
    state: link
    force: yes
  when: ansible_system == "Linux"
  become: true
  tags:
  - always

- name: "Ensure symlink: {{ brew_install_path }}/etc/openssl/private"
  file:
    src: "{{ brew_install_path }}/etc/openssl/private"
    dest: "/usr/lib/ssl/private"
    state: link
    force: yes
  when: ansible_system == "Linux"
  become: true
  tags:
  - always
#
#- name: "Generate keys and signing for domains with php versions"
#  shell: 'OPENSSL_CONF="{{ brew_install_path }}/etc/openssl/localCA/{{item.1}}_{{item.0}}_{{root_domain}}.cnf" openssl req -newkey rsa:2048 -keyout {{ brew_install_path }}/etc/openssl/localCA/private/{{item.1}}_{{item.0}}_{{root_domain}}_key.pem -keyform PEM -out {{ brew_install_path }}/etc/openssl/localCA/{{item.1}}_{{item.0}}_{{root_domain}}_req.pem -outform PEM -nodes && openssl rsa < {{ brew_install_path }}/etc/openssl/localCA/private/{{item.1}}_{{item.0}}_{{root_domain}}_key.pem > {{ brew_install_path }}/etc/openssl/localCA/private/{{item.1}}_{{item.0}}_{{root_domain}}_key_encrypted.pem && OPENSSL_CONF="{{ brew_install_path }}/etc/openssl/localCA/caconfig.cnf" openssl ca -batch -in {{ brew_install_path }}/etc/openssl/localCA/{{item.1}}_{{item.0}}_{{root_domain}}_req.pem -out {{ brew_install_path }}/etc/openssl/localCA/certs/{{item.1}}_{{item.0}}_{{root_domain}}_crt.pem'
#  with_nested:
#    - "{{subdomains}}"
#    - "{{php_versions}}"
#  tags:
#    - always
